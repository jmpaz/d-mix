# d-mix

## Workflow

### Download

Accept a list of URLs and download tracks to `.tmp/` for direct use.

```python
import subprocess
import os

def read_secrets(filename="secrets.txt"):
    secrets = {}
    with open(filename, "r") as file:
        for line in file:
            key, value = line.strip().split("=", 1)
            secrets[key] = value
    return secrets

def download(urls, client_id, client_secret, target_dir=".tmp"):
    # Set environment variables for the subprocess
    env = os.environ.copy()
    env['SPOTIFY_CLIENT_ID'] = client_id
    env['SPOTIFY_CLIENT_SECRET'] = client_secret

  # Prepare the command to run the downloader script with the target directory
    command = ["python", "d-mix/downloader.py"] + urls + [target_dir]
    
    # Execute the script via subprocess with the updated environment
    result = subprocess.run(command, capture_output=True, text=True, env=env)
    
    if result.returncode == 0:
        print("Download successful")
    else:
        print(f"Download failed with error:\n{result.stderr}")

secrets = read_secrets()
download(["https://open.spotify.com/track/4cOdK2wGLETKBW3PvgPWqT"], secrets['client_id'], secrets['client_secret'])
```

### Process
Iterate over a list of audio file paths to separate the tracks.

```python
import os
import demucs.api

class DemucsClient:
    def __init__(self, base_tracks, stems=None):
        self.base_tracks = base_tracks
        self.stems = stems
        self.separator = demucs.api.Separator()
        
    def separate(self):
        # Separate the tracks with demucs
        for track_path in self.base_tracks:
            print(f"Processing {track_path}")

            # Extract track stems
            origin, stems = self.separator.separate_audio_file(track_path)
            vocals = stems['vocals']
            no_vocals = origin - vocals

            # Get the original file extension and construct the output directory
            _, file_extension = os.path.splitext(track_path)
            track_dir = f"outputs/{track_path.split('/')[-1].replace(file_extension, '')}"
            os.makedirs(track_dir, exist_ok=True)

            for stem, source in stems.items():
                # Construct output file path
                output_path = f"{track_dir}/{stem}{file_extension}"
                demucs.api.save_audio(source, output_path, samplerate=self.separator.samplerate)

            no_vocals_path = f"{track_dir}/all, minus vocals{file_extension}"
            demucs.api.save_audio(no_vocals, no_vocals_path, samplerate=self.separator.samplerate)

        print("Separation completed.")
              
    def analyze(self):
        # Per-stem analysis
        print("Analyzing stems")


tracks = [".tmp/Rick Astley - Never Gonna Give You Up.mp3"]
client = DemucsClient(tracks)
client.separate()
```

